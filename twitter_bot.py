import os
import tweepy
import requests
from datetime import datetime
import time
import random
from urllib.parse import quote

# === Konfigurasi API Keys ===
api_key = os.getenv("TWITTER_API_KEY")
api_secret = os.getenv("TWITTER_API_SECRET")
access_token = os.getenv("TWITTER_ACCESS_TOKEN")
access_token_secret = os.getenv("TWITTER_ACCESS_TOKEN_SECRET")
bearer_token = os.getenv("TWITTER_BEARER_TOKEN")
target_link = os.getenv("TARGET_LINK", "https://example.com")
pexels_key = os.getenv("PEXELS_API_KEY")
hf_key = os.getenv("HUGGINGFACE_API_KEY")

# Autentikasi Twitter
client = tweepy.Client(
    bearer_token=bearer_token,
    consumer_key=api_key,
    consumer_secret=api_secret,
    access_token=access_token,
    access_token_secret=access_token_secret,
    wait_on_rate_limit=True
)
api = tweepy.API(tweepy.OAuth1UserHandler(api_key, api_secret, access_token, access_token_secret))

# === Topik ===
topics = ["AI", "tech", "future", "innovation", "coding", "space", "crypto", "robot", "web3"]

# === 1. Ambil trending hashtag ===
def get_trending_hashtags():
    try:
        trends = api.get_place_trends(id=1)
        hashtags = [t["name"] for t in trends[0]["trends"] if t["name"].startswith("#")][:3]
        return hashtags or ["#AI", "#Tech"]
    except:
        return ["#AI", "#Future"]

# === 2. Ambil gambar dari Pexels ===
def fetch_image_from_pexels(prompt):
    headers = {"Authorization": pexels_key, "User-Agent": "Bot/1.0"}
    query = "futuristic abstract digital"
    keyword_map = {
        "AI": "ai artificial intelligence",
        "tech": "technology digital",
        "coding": "code programming developer",
        "space": "space universe cosmos",
        "crypto": "cryptocurrency blockchain",
        "robot": "robot android machine",
    }
    for k, v in keyword_map.items():
        if k in prompt.lower():
            query = v
            break

    url = f"https://api.pexels.com/v1/search?query={quote(query)}&per_page=1&orientation=landscape"
    try:
        resp = requests.get(url, headers=headers)
        if resp.status_code == 200:
            data = resp.json()
            if data["photos"]:
                img_url = data["photos"][0]["src"]["large"]
                filename = f"img_{int(time.time())}.jpg"
                with open(filename, "wb") as f:
                    f.write(requests.get(img_url).content)
                return filename
    except Exception as e:
        print("Pexels error:", e)
    return None

# === 3. Auto-generate caption dari gambar pakai Hugging Face ===
def generate_caption_from_image(image_path):
    if not hf_key:
        return "This futuristic concept was generated by AI. What do you think?"

    API_URL = "https://api-inference.huggingface.co/models/Salesforce/blip-image-captioning-base"
    headers = {"Authorization": f"Bearer {hf_key}"}

    with open(image_path, "rb") as f:
        data = f.read()

    try:
        response = requests.post(API_URL, headers=headers, data=data, timeout=60)
        if response.status_code == 200:
            caption = response.json()[0]["generated_text"]
            # Perbaiki caption agar lebih menarik
            caption = caption.capitalize()
            if not caption.endswith("."):
                caption += "."
            return f"{caption} What would you do in this world? ü§î"
        else:
            print("HF error:", response.status_code, response.text)
    except Exception as e:
        print("Caption failed:", e)

    return "Mind-blowing concept. What do you think? ü§Ø"

# === 4. Post tweet utama ===
def post_tweet_with_image():
    topic = random.choice(topics)
    hashtags = " ".join(get_trending_hashtags())

    print(f"üé® Generating image for: {topic}")
    image_file = fetch_image_from_pexels(topic)
    if not image_file:
        print("‚ùå No image. Exiting.")
        return None, None

    print("üñºÔ∏è Generating caption from image...")
    caption = generate_caption_from_image(image_file)

    full_text = f"""
{caption}

{hashtags}
    """.strip()

    try:
        media = api.media_upload(image_file)
        response = client.create_tweet(text=full_text, media_ids=[media.media_id])
        tweet_id = response.data["id"]
        print(f"‚úÖ Tweet posted: {tweet_id}")
        return tweet_id, image_file
    except Exception as e:
        print("Tweet failed:", e)
        if os.path.exists(image_file):
            os.remove(image_file)
        return None, None

# === 5. Balas ke semua mention (auto-reply) ===
def auto_reply_to_mentions(since_id):
    try:
        response = client.get_users_mentions(id=client.get_me().data.id, since_id=since_id, max_results=10)
        if not response.data:
            return since_id

        for mention in response.data:
            try:
                # Jangan reply ke diri sendiri
                if str(mention.author_id) == str(client.get_me().data.id):
                    continue

                reply_text = f"Thanks for replying! Want to generate images like this? üëâ {target_link}"
                client.create_tweet(
                    text=reply_text,
                    in_reply_to_tweet_id=mention.id
                )
                print(f"üîÅ Replied to tweet {mention.id}")
                since_id = mention.id  # update last seen
            except Exception as e:
                print("Reply failed:", e)
    except Exception as e:
        print("Fetch mentions failed:", e)
    return since_id

# === 6. Simpan & baca since_id (untuk tracking mention) ===
def save_since_id(since_id):
    with open("since_id.txt", "w") as f:
        f.write(str(since_id))

def load_since_id():
    if os.path.exists("since_id.txt"):
        with open("since_id.txt", "r") as f:
            return f.read().strip()
    return None

# === 7. Main Function ===
def main():
    print("üöÄ Starting Advanced Twitter Bot...")

    # 1. Post tweet baru
    tweet_id, image_file = post_tweet_with_image()
    if not tweet_id:
        return

    # 2. Reply pertama: kirim link kamu
    time.sleep(8)
    client.create_tweet(
        text=f"Want the tools I use to generate these? üëâ {target_link}",
        in_reply_to_tweet_id=tweet_id
    )
    print("üîó First reply with link sent!")

    # 3. Auto-reply ke mention (dari sebelumnya)
    since_id = load_since_id()
    new_since_id = auto_reply_to_mentions(since_id or tweet_id)
    save_since_id(new_since_id)

    # 4. Bersihkan file
    if image_file and os.path.exists(image_file):
        os.remove(image_file)

if __name__ == "__main__":
    main()
